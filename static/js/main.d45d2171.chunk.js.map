{"version":3,"sources":["loader.js","App.js","serviceWorker.js","index.js","img/logo.png","img/loader.gif"],"names":["loader","src","loading","alt","className","CharacterCard","props","character","style","backgroundImage","image","name","App","state","nextPage","error","data","results","fetchCharacters","a","setState","fetch","response","json","info","concat","this","message","logo","map","key","id","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","module","exports"],"mappings":"kVAIe,SAASA,IACtB,OACE,6BACE,yBAAKC,IAAKC,IAASC,IAAI,UAAUC,UAAU,qB,MCAjD,SAASC,EAAcC,GAAQ,IACrBC,EAAcD,EAAdC,UAER,OACE,yBACEH,UAAU,gBACVI,MAAO,CAAEC,gBAAgB,OAAD,OAASF,EAAUG,MAAnB,OAExB,yBAAKN,UAAU,+CACZG,EAAUI,O,IAwFJC,E,2MAjFbC,MAAQ,CACNC,SAAU,EACVZ,SAAS,EACTa,MAAO,KACPC,KAAM,CAEJC,QAAS,K,EAObC,gB,sBAAkB,8BAAAC,EAAA,6DAChB,EAAKC,SAAS,CAAElB,SAAS,EAAMa,MAAO,OADtB,kBAKSM,MAAM,mDAAD,OACyB,EAAKR,MAAMC,WANlD,cAKRQ,EALQ,gBAQKA,EAASC,OARd,OAQRP,EARQ,OAWd,EAAKI,SAAS,CACZlB,SAAS,EACTc,KAAM,CACJQ,KAAMR,EAAKQ,KAEXP,QAAS,GAAGQ,OAAO,EAAKZ,MAAMG,KAAKC,QAASD,EAAKC,UAEnDH,SAAU,EAAKD,MAAMC,SAAW,IAlBpB,kDAqBd,EAAKM,SAAS,CACZlB,SAAS,EACTa,MAAM,EAAD,KAvBO,0D,mFAFhBW,KAAKR,oB,+BA8BG,IAAD,OACP,OAAIQ,KAAKb,MAAME,MACP,UAAN,OAAiBW,KAAKb,MAAME,MAAMY,SAGlC,yBAAKvB,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OAAOH,IAAK2B,IAAMzB,IAAI,iBAErC,wBAAIC,UAAU,OACXsB,KAAKb,MAAMG,KAAKC,QAAQY,KAAI,SAAAtB,GAAS,OACpC,wBAAIH,UAAU,iBAAiB0B,IAAKvB,EAAUwB,IAC5C,kBAAC1B,EAAD,CAAeE,UAAWA,SAM/BmB,KAAKb,MAAMX,SACV,yBAAKE,UAAU,UACb,kBAAC,EAAD,QAMFsB,KAAKb,MAAMX,SACX,4BACEE,UAAU,sDACV4B,QAAS,kBAAM,EAAKd,oBAFtB,uB,GArEMe,aCVEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAMY,a,kBEzI5BwB,EAAOC,QAAU,IAA0B,kC,kBCA3CD,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.d45d2171.chunk.js","sourcesContent":["import React from \"react\";\r\nimport loading from \"../src/img/loader.gif\";\r\n\r\n\r\nexport default function loader() {\r\n  return (\r\n    <div>\r\n      <img src={loading} alt=\"Loading\" className=\"d-block mx-auto\" />\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport logo from \"../src/img/logo.png\";\nimport Loader from \"../src/loader\";\nimport \"../../node_modules/bulma/css/bulma.min.css\";\n\nfunction CharacterCard(props) {\n  const { character } = props;\n\n  return (\n    <div\n      className=\"CharacterCard\"\n      style={{ backgroundImage: `url(${character.image})` }}\n    >\n      <div className=\"CharacterCard__name-container text-truncate\">\n        {character.name}\n      </div>\n    </div>\n  );\n}\n\nclass App extends Component {\n  state = {\n    nextPage: 1,\n    loading: true,\n    error: null,\n    data: {\n      // Results porque la API contiene un apartado llamado 'info' y otro 'results'\n      results: []\n    }\n  };\n\n  componentDidMount() {\n    this.fetchCharacters();\n  }\n  fetchCharacters = async () => {\n    this.setState({ loading: true, error: null });\n\n    // Intentamos conectarnos a la API con 'try', si hay error: se ejecuta el catch\n    try {\n      const response = await fetch(\n        `https://rickandmortyapi.com/api/character/?page=${this.state.nextPage}`\n      );\n      const data = await response.json(); //Al response o petición, le almaceno los datos en 'data'\n\n      // lo mejor, es guardar la data en un State\n      this.setState({\n        loading: false,\n        data: {\n          info: data.info,\n          // Concatenamos los resultados en caso de click en Load more\n          results: [].concat(this.state.data.results, data.results)\n        },\n        nextPage: this.state.nextPage + 1\n      });\n    } catch (error) {\n      this.setState({\n        loading: false,\n        error: error\n      });\n    }\n  };\n\n  render() {\n    if (this.state.error) {\n      return `Error: ${this.state.error.message}`;\n    }\n    return (\n      <div className=\"container\">\n        <div className=\"App\">\n          <img className=\"Logo\" src={logo} alt=\"Rick y Morty\" />\n\n          <ul className=\"row\">\n            {this.state.data.results.map(character => (\n              <li className=\"col-6 col-md-3\" key={character.id}>\n                <CharacterCard character={character} />\n              </li>\n            ))}\n          </ul>\n\n          {/* Si: Mi state está en loaging, entonces (&&): */}\n          {this.state.loading && (\n            <div className=\"loader\">\n              <Loader />\n            </div>\n          )}\n\n          {/* Botón de cargar más */}\n          {/* Lo queremos mostrar cuando NO esté en loading la app */}\n          {!this.state.loading && (\n            <button\n              className=\"button is-success is-rounded is-medium is-fullwidth\"\n              onClick={() => this.fetchCharacters()}\n            >\n              Cargar más\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.de82c64b.png\";","module.exports = __webpack_public_path__ + \"static/media/loader.960a1abf.gif\";"],"sourceRoot":""}